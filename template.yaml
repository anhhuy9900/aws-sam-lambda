AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Practice SAM Template for sam-app
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 180
    Tracing: Active
    Runtime: nodejs16.x
    MemorySize: 256
    Architectures:
      - x86_64
    # Layers:
    #   # Our own layer that we are going to build
    #   - !Ref RuntimeDependenciesLayer
    Environment:
      Variables:
        AWS_REGION_VALUE: us-east-2
        ENABLE_HTTPS: false
        ORIGINAL_HOST: localhost
        ORIGINAL_PORT: 9100
        DefaultEnableApp: !Ref DefaultEnableApp
  Api:
    TracingEnabled: True

Parameters:
  SamAppBucketName: #sam-app-storage-v1
    Type: String
    Description: The S3 storage for practice
  S3ToSnsBucketName: #sam-app-s3-to-sns-v1
    Type: String
  S3ToSnsTopicName: #sam-app-s3-to-sns-topic
    Type: String
  DefaultEnableApp:
    Type: String
    Description: Sample environment variable
    Default: 'True'
  IntegrationServicesSnsTopicName: #sam-app-apigw-lambda-sqs-sns-integration-sns
    Type: String
  IntegrationServicesSqsQueueName: #sam-app-apigw-lambda-sqs-sns-integration-sqs
    Type: String
  CognitoUserPoolArn:
    Description: THe ARN of cognito user pool
    Type: String
  JWTSecret:
    Description: The secret of authorizer
    Type: String
  SubnetId:
    Type: String
    Description: Provide the SubnetId which you used while creating Redis cluster
    AllowedPattern: .+
  SecurityGroupId:
    Type: String
    Description: Provide the SecurityGroupId which you used while creating Redis cluster
    AllowedPattern: .+
  VpcId:
    Type: String
    Description: The VPC you want to run your ElastiCache cluster in

Resources:
  RolesCreation:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: RolesCreation
      Description: !Sub "Used by Role Creation Service. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: SAMAppRoleLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:${AWS::Partition}:iam::*:role/RolesCreation"
        - PolicyName: SAMAppRoleS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:GetObjectAcl"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                Resource: !Sub "arn:${AWS::Partition}:iam::*:role/RolesCreation"
        - PolicyName: SAMAppRoleSQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:*"
                Resource: "*"
        - PolicyName: SAMAppRoleSNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:*"
                Resource: "*"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSXrayWriteOnlyAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"  

  # RuntimeDependenciesLayer:
  #   Type: AWS::Serverless::LayerVersion
  #   Metadata:
  #     BuildMethod: makefile
  #   Properties:
  #     Description: Runtime dependencies for Lambdas
  #     ContentUri: ./
  #     CompatibleRuntimes:
  #       - nodejs16.x
  #     RetentionPolicy: Retain


  #################### Practice lambda patterns with multi use-cases #######################
  LambdaPatterns:
    Type: AWS::Serverless::Application
    Properties:
      Location: src/lambda-patterns/template.yaml
      Parameters:
        SamAppBucketName: !Ref SamAppBucketName

  #################### Pattern Product CURD #######################
  ProductCURD:
    Type: AWS::Serverless::Application
    Properties:
      Location: src/product-curd/template.yaml

  #################### S3 to SNS Topic #######################
  IntegrateS3ToSns:
    Type: AWS::Serverless::Application
    Properties:
      Location: src/s3-to-sns/template.yaml
      Parameters:
        S3ToSnsTopicName: !Ref S3ToSnsTopicName
        S3ToSnsBucketName: !Ref S3ToSnsBucketName

  #################### Pattern Event invoke lambda destination #######################
  EventLambdaDestination:
    Type: AWS::Serverless::Application
    Properties:
      Location: src/lambda-event-destination/template.yaml
  
  #################### Pattern Integration between API gateway, SNS, SQS, Lambda #######################
  IntegrateApiGwLambdaSnsSqs:
    Type: AWS::Serverless::Application
    Properties:
      Location: src/apigw-lambda-sqs-sns-integration/template.yaml
      Parameters:
        RolesCreation: !GetAtt RolesCreation.Arn
        IntegrationServicesSnsTopicName: !Ref IntegrationServicesSnsTopicName
        IntegrationServicesSqsQueueName: !Ref IntegrationServicesSqsQueueName


  #################### User Auth Cognito Pattern #######################
  AuthCognito:
    Type: AWS::Serverless::Application
    Properties:
      Location: src/auth-cognito/template.yaml
      Parameters:
        CognitoUserPoolArn: !Ref CognitoUserPoolArn

  #################### Pattern Api Gateway Lambda Authorizer #######################
  ApiGwLambdaAuthorizer:
    Type: AWS::Serverless::Application
    Properties:
      Location: src/api-gateway-lambda-authorizer/template.yaml
      Parameters:
        JWTSecret: !Ref JWTSecret
  
  #################### pattern Api Gateway lambda Observability #######################
  # ApiGwLambdaObservability:
  #   Type: AWS::Serverless::Application
  #   Properties:
  #     Location: src/apigw-lambda-observability/template.yaml
  
  #################### Pattern elasticache lambda s3 #######################
  # ElasticacheLambdaS3:
  #   Type: AWS::Serverless::Application
  #   Properties:
  #     Location: src/elasticache-lambda-s3/template.yaml
  #     Parameters:
  #       SubnetId: !Ref SubnetId
  #       SecurityGroupId: !Ref SecurityGroupId
  #       VpcId: !Ref VpcId


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  # APIEndpoint:
  #   Description: "API Gateway endpoint URL for Prod stage"
  #   Value: !Sub "https://${AWS::ApiGateway::RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  SamAppBucketName:
    Value: !Ref SamAppBucketName
    Description: S3 Bucket for object storage
  # Pattern1APIEndpoint:
  #   Description: "API Gateway endpoint URL for apigw-lambda-sqs-sns-integration"
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/apigw-lambda-sqs-sns-integration"
